name: Test dbt-projects-cli

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pytest.ini'
      - 'Pipfile'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pytest.ini'
      - 'Pipfile'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    
    - name: Install dependencies
      run: |
        pipenv install --dev --python ${{ matrix.python-version }}
    
    - name: Install package in editable mode
      run: |
        pipenv run pip install -e .
    
    - name: Lint with flake8
      run: |
        pipenv run flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        pipenv run flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pipenv run pytest tests/unit -v --tb=short
    
    - name: Run integration tests
      run: |
        pipenv run pytest tests/integration -v --tb=short
    
    - name: Run all tests with coverage
      run: |
        pipenv run pytest --cov=src/dbt_projects_cli --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-cli-integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev --python 3.11
    
    - name: Test CLI installation
      run: |
        pipenv run pip install -e .
    
    - name: Test basic CLI commands
      run: |
        pipenv run dbt-cli --help
        pipenv run dbt-cli scaffold --help
        pipenv run dbt-cli migrate --help
    
    - name: Test scaffold command end-to-end
      run: |
        mkdir -p test-workspace
        cd test-workspace
        pipenv run dbt-cli scaffold domain \
          --alignment source-aligned \
          --source-system test \
          --domain-name integration-test \
          --description "CLI integration test package"
        
        # Verify files were created
        test -f packages/domains/source-aligned/test/integration-test/dbt_project.yml
        test -f packages/domains/source-aligned/test/integration-test/packages.yml
        test -f packages/domains/source-aligned/test/integration-test/groups/_group.yml
        
        # Verify content
        grep -q "test_integration_test" packages/domains/source-aligned/test/integration-test/dbt_project.yml
        grep -q "source-aligned" packages/domains/source-aligned/test/integration-test/dbt_project.yml
